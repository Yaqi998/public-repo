import pandas as pd
import numpy as np
import shap
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
from xgboost import XGBClassifier
import dask
from dask import delayed, compute

# Initialize Dask
dask.config.set(scheduler='threads')

# Sample data generation for demonstration
np.random.seed(42)
n_samples = 1000
n_features = 20
X = pd.DataFrame(np.random.rand(n_samples, n_features), columns=[f"feature_{i}" for i in range(n_features)])
y = np.random.randint(0, 2, size=n_samples)

# Split data into train and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize storage for AUC scores
auc_table = []

# Function to calculate SHAP values and select features to drop
def select_features(X_train, y_train, model):
    # Calculate SHAP values
    explainer = shap.TreeExplainer(model)
    shap_values = explainer.shap_values(X_train)
    # Compute mean absolute SHAP values for each feature
    mean_shap = np.abs(shap_values).mean(axis=0)
    # Rank features by importance (lowest importance first)
    feature_ranking = np.argsort(mean_shap)
    # Determine number of features to drop (10% of total features)
    num_features_to_drop = max(1, int(0.1 * X_train.shape[1]))
    # Select features to drop
    features_to_drop = X_train.columns[feature_ranking[:num_features_to_drop]]
    return features_to_drop

# Iterative feature selection
while X_train.shape[1] > 10:
    # Train XGBoost model
    model = XGBClassifier(use_label_encoder=False, eval_metric="logloss", random_state=42)
    model.fit(X_train, y_train)
    
    # Validate the model
    y_pred = model.predict_proba(X_val)[:, 1]
    auc = roc_auc_score(y_val, y_pred)
    
    # Store current AUC score and remaining features
    auc_table.append({"num_features": X_train.shape[1], "auc": auc})
    
    # Select features to drop using SHAP (parallelizable with Dask)
    delayed_select = delayed(select_features)(X_train, y_train, model)
    features_to_drop = compute(delayed_select)[0]
    
    # Drop features from the training and validation sets
    X_train = X_train.drop(columns=features_to_drop)
    X_val = X_val.drop(columns=features_to_drop)

# Convert AUC table to DataFrame
auc_table = pd.DataFrame(auc_table)

# Print final AUC table
print(auc_table)
